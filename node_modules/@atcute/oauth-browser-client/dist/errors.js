export class LoginError extends Error {
    name = 'LoginError';
}
export class AuthorizationError extends Error {
    name = 'AuthorizationError';
}
export class ResolverError extends Error {
    name = 'ResolverError';
}
export class TokenRefreshError extends Error {
    sub;
    name = 'TokenRefreshError';
    constructor(sub, message, options) {
        super(message, options);
        this.sub = sub;
    }
}
export class OAuthResponseError extends Error {
    response;
    data;
    name = 'OAuthResponseError';
    error;
    description;
    constructor(response, data) {
        const error = ifString(ifObject(data)?.['error']);
        const errorDescription = ifString(ifObject(data)?.['error_description']);
        const messageError = error ? `"${error}"` : 'unknown';
        const messageDesc = errorDescription ? `: ${errorDescription}` : '';
        const message = `OAuth ${messageError} error${messageDesc}`;
        super(message);
        this.response = response;
        this.data = data;
        this.error = error;
        this.description = errorDescription;
    }
    get status() {
        return this.response.status;
    }
    get headers() {
        return this.response.headers;
    }
}
export class FetchResponseError extends Error {
    response;
    status;
    name = 'FetchResponseError';
    constructor(response, status, message) {
        super(message);
        this.response = response;
        this.status = status;
    }
}
const ifString = (v) => {
    return typeof v === 'string' ? v : undefined;
};
const ifObject = (v) => {
    return typeof v === 'object' && v !== null && !Array.isArray(v) ? v : undefined;
};
//# sourceMappingURL=errors.js.map