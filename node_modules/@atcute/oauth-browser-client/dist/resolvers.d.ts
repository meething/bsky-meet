import type { At } from '@atcute/client/lexicons';
import { type DidDocument } from '@atcute/client/utils/did';
import type { IdentityMetadata } from './types/identity.js';
import type { AuthorizationServerMetadata, ProtectedResourceMetadata } from './types/server.js';
/**
 * Resolves domain handles into DID identifiers, by requesting Bluesky's AppView
 * for identity resolution.
 * @param handle Domain handle to resolve
 * @returns DID identifier resolved from the domain handle
 */
export declare const resolveHandle: (handle: string) => Promise<At.DID>;
/**
 * Get DID documents of did:plc (via plc.directory) and did:web identifiers
 * @param did DID identifier we're seeking DID doc from
 * @returns Retrieved DID document
 */
export declare const getDidDocument: (did: At.DID) => Promise<DidDocument>;
/**
 * Get OAuth protected resource metadata from a host
 * @param host URL of the host
 * @returns Retrieved protected resource metadata
 */
export declare const getProtectedResourceMetadata: (host: string) => Promise<ProtectedResourceMetadata>;
/**
 * Get OAuth authorization server metadata from a host
 * @param host URL of the host
 * @returns Retrieved authorization server metadata
 */
export declare const getAuthorizationServerMetadata: (host: string) => Promise<AuthorizationServerMetadata>;
/**
 * Resolve handle domains or DID identifiers to get their PDS and its authorization server metadata
 * @param ident Handle domain or DID identifier to resolve
 * @returns Resolved PDS and authorization server metadata
 */
export declare const resolveFromIdentity: (ident: string) => Promise<{
    identity: IdentityMetadata;
    metadata: AuthorizationServerMetadata;
}>;
/**
 * Request authorization server metadata from a PDS
 * @param host URL of the host
 * @returns Resolved authorization server metadata
 */
export declare const resolveFromService: (host: string) => Promise<{
    metadata: AuthorizationServerMetadata;
}>;
/**
 * Request authorization server metadata from its protected resource metadata
 * @param input URL of the host whose authorization server is delegated
 * @returns Resolved authorization server metadata
 */
export declare const getMetadataFromResourceServer: (input: string) => Promise<AuthorizationServerMetadata>;
