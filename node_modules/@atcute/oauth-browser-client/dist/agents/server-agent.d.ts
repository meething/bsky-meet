import type { At } from '@atcute/client/lexicons';
import type { DPoPKey } from '../types/dpop.js';
import type { OAuthParResponse } from '../types/par.js';
import type { PersistedAuthorizationServerMetadata } from '../types/server.js';
import type { ExchangeInfo, OAuthTokenResponse, TokenInfo } from '../types/token.js';
export declare class OAuthServerAgent {
    #private;
    constructor(metadata: PersistedAuthorizationServerMetadata, dpopKey: DPoPKey);
    request(endpoint: 'pushed_authorization_request', payload: Record<string, unknown>): Promise<OAuthParResponse>;
    request(endpoint: 'token', payload: Record<string, unknown>): Promise<OAuthTokenResponse>;
    request(endpoint: 'revocation', payload: Record<string, unknown>): Promise<any>;
    request(endpoint: 'introspection', payload: Record<string, unknown>): Promise<any>;
    revoke(token: string): Promise<void>;
    exchangeCode(code: string, verifier?: string): Promise<{
        info: ExchangeInfo;
        token: TokenInfo;
    }>;
    refresh({ sub, token }: {
        sub: At.DID;
        token: TokenInfo;
    }): Promise<TokenInfo>;
}
